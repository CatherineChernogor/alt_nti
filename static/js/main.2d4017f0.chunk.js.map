{"version":3,"sources":["components/Header.js","components/Footer.js","components/Bar.js","style/style.js","components/Circle.js","components/Points.js","components/Table.js","components/Main.js","components/Navigation.js","components/NavMenu.js","components/Notification.js","components/Message.js","components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","Bar","props","style","backgroundColor","color","width","height","position","marginTop","content","txt4circle","font","title","task","heading","subHeading","text","upperElement","zIndex","lowerElement","unabledElement","Circle","num","x","showScore","Points","countProgress","score","maxScore","Math","ceil","time","Table","d","date","msg","b","task1","Main","React","Component","Navigation","NavMenu","openMenuBox","setState","menu","closeMenuBox","renderMenu","onClick","object","navigation","renderBtn","state","this","Notification","openNotPanel","notification","closeNotPanel","renderBox","Message","Chat","openChatBox","chat","closeChatBox","renderChat","message","message2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2d4017f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Header = () => (\r\n    <header>\r\n            <div className=\"logo\" ></div>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer></footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { createElement } from 'react';\r\nimport '../App.css';\r\n\r\nfunction Bar(props) {\r\n\r\n    return (\r\n        <div className='bar blck-border option-text-m'>\r\n            <div style={{\r\n                backgroundColor: props.color,\r\n                width: props.width * 2+'px',\r\n                height: \"100%\"\r\n            }}></div>\r\n            <div style={{\r\n                position: 'inherit',\r\n                marginTop: \"-23px\"\r\n        }}>\r\n                {props.content}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Bar;","\r\nconst style = {\r\n\r\n    txt4circle: {\r\n        font: \" 400 16px 'Montserrat', sans- serif\",\r\n    },\r\n    title: {\r\n        marginTop: \"40px\",\r\n    },\r\n    task: {\r\n        marginTop: \"70px\",\r\n    },\r\n    heading: {\r\n        font: \"400 60px 'Montserrat', sans-serif\",\r\n    },\r\n    subHeading: {\r\n        font: \"400 36px 'Montserrat', sans-serif\",\r\n    },\r\n    text: {\r\n        font: \"400 24px 'Montserrat', sans-serif\",\r\n    },\r\n    upperElement:{\r\n        zIndex: \"9999\",\r\n    },\r\n    lowerElement:{\r\n        zIndex: \"98\",\r\n    },\r\n    unabledElement:{\r\n        zIndex: \"0\"\r\n    }\r\n};\r\n\r\nexport default style;","import React, { createElement } from 'react';\r\nimport '../App.css';\r\nimport style from '../style/style';\r\n\r\nfunction Circle(props) {\r\n\r\n    function showScore(num) {\r\n\r\n        let x = num % 10;\r\n        if (x === 1 && num !== 11) {\r\n            return (num + \" балла\");\r\n        } else if ((x === 2 || x === 3 || x === 4) && (num !== 12 && num !== 13 && num !== 14)) {\r\n            return (num + \" балла\");\r\n        } else {\r\n            return (num + \" баллов\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='circle blck-border'>\r\n            <div style={style.txt4circle}>\r\n            {showScore(props.content)}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Circle;","import React, { createElement } from 'react';\r\nimport Bar from './Bar';\r\nimport Circle from './Circle';\r\nimport '../App.css';\r\nimport '../style/points.css';\r\n\r\nfunction Points() {\r\n\r\n    function countProgress (score, maxScore){\r\n        return Math.ceil(score / maxScore * 100);\r\n    }\r\n\r\n    function countTime(time, maxTime){\r\n        \r\n        return 34;\r\n    }\r\n    return (\r\n        <div className=\"points\">\r\n            <div className=\"bars\">\r\n                <Bar\r\n                    width = {countProgress(score, maxScore)}\r\n                    color=\"#78d0ff\"\r\n                    content={\"Прогресс - \" + countProgress(score, maxScore)+\"%\"}\r\n                />\r\n                <Bar\r\n                    width = {countTime(time, maxTime)}\r\n                    color=\"#96c7cc\"\r\n                    content={time}\r\n                />\r\n            </div>\r\n            <Circle\r\n                content={score}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Points;\r\n\r\n\r\n//test data \r\nlet score = 67;\r\nlet maxScore = 450;\r\nlet time = \"20:20\";\r\nlet maxTime = \"36:00\";","import React, { createElement } from 'react';\r\nimport '../App.css';\r\nimport '../style/table.css';\r\n\r\nfunction Table() {\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <table className='option-text-m'>\r\n                <th>Попытки</th>\r\n                <th>Баллы</th>\r\n                <tr>\r\n                    <td className='data right'>15:24 23.09.3434 work time 23s</td>\r\n                    <td className='result'>34/100</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className='data wrong'>15:44 23.19.3344 wrong format</td>\r\n                    <td className='result'>-</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className='data rigth'>{d.time + ' ' + d.date + ' ' + d.msg}</td>\r\n                    <td className='result'>{b}</td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n\r\n//test data\r\nlet d = {\r\n    time: \"15:34\",\r\n    date: \"25.03.2020\",\r\n    msg: \"work time 34s\"\r\n}\r\n\r\nlet b = '26/100'\r\n","import React from 'react';\r\nimport Points from './Points';\r\nimport Table from './Table';\r\nimport '../App.css';\r\n\r\nconst task1 = 'Имеются изображения маркеров 8 типов. Задача - написать классификатор маркеров, который по одному изображению говорит его id и разворот относительно оригинального изображения.' + '<br></br>' + 'Для получения оригинальных изображений и их id следует отправить запрос на сервер с коммандо get_omarkers Для получения маркеров со стенда, которые следует распознать нужно отправить запрос на сервер get_merkerks Для проверки реализованного классификатора нужно сначала обратиться к серверу для получения маркеров расположенных на стенде, затем отправить запрос на проверку с командой check, в котором нужно передать массив типа [(id, x, y, r),...]. ';\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <Points />\r\n                <div className=\"heading2 title\">Классификатор маркеров</div>\r\n\r\n                <div className=\"normal-text task\">{task1 + task1 + task1}</div>\r\n\r\n               <Table/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { createElement } from 'react';\r\nimport '../App.css';\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction Navigation(props){\r\n/*\r\n    const lvl1 = Object.keys(props.object);\r\n    //console.log(Object.entries(props.object));\r\n\r\n    let obj = {};\r\n    let nav = props.object;\r\n    for (let title in nav){\r\n        let titleText = document.createElement('div');\r\n        titleText.append(title);\r\n        console.log('+',title);\r\n        obj.set(title);\r\n        for (let ti in nav[title]){\r\n            console.log('++',ti);\r\n            //console.log('task text', nav[title][ti]);\r\n            obj.get(title).set(ti);\r\n        }\r\n        console.log(obj);\r\n    }\r\n\r\n    const array = [1, 2, 3, 4, 5];\r\n    const listItems = lvl1.map((item) =>\r\n        <li>{array}</li>\r\n    );\r\n\r\n    */\r\n    \r\n    //выводит тексты задач\r\n    //var result = Object.values(props.object).map(v => Object.values(v))\r\n    //console.log(result);\r\n    \r\n\r\n    return(/*\r\n        <div className=\"nav\">\r\n        {renderNav(props.nav)}\r\n        </div>*/\r\n        <ul className=\"option-text-m\">\r\n            <li>\r\n                Компьютерное зрение\r\n                <ul>\r\n                <li>Задача</li>\r\n                <li>Информация</li>\r\n                </ul>\r\n            </li>\r\n            <li>Проективная геометрия                \r\n                <ul>\r\n                <li>Задача </li>\r\n                <li>Информация</li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Navigation;\r\n\r\n\r\n\r\n\r\n\r\n        //document.querySelector('.nav-bar').append(navigation);\r\n        /*for (let title in nav){\r\n            let titleText = document.createElement('div');\r\n            //console.log(document.querySelector('.navigation'));\r\n            //document.querySelector('.navigation').append(titleText);\r\n            titleText.append(title);\r\n            console.log('+',title);\r\n            for (let ti in nav[title]){\r\n                console.log('++',ti);\r\n                //console.log('task text', nav[title][ti]);\r\n                \r\n            }\r\n        }*/","import React, { createElement } from 'react';\r\nimport '../App';\r\nimport '../style/buttons.css';\r\nimport style from '../style/style';\r\nimport Navigation from './Navigation';\r\n\r\nclass NavMenu extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = { menu: false }\r\n    }\r\n    openMenuBox = () => {\r\n        this.setState({ menu: true })\r\n    }\r\n    closeMenuBox = () => {\r\n        this.setState({ menu: false })\r\n    }\r\n    renderMenu = () => {\r\n        return (\r\n            <div className=\"screen\">\r\n\r\n                <div\r\n                    className=\"gray-screen\"\r\n                    style={style.lowerElement}>\r\n                </div>\r\n\r\n                <div\r\n                    className='nav-bar'\r\n                    style={style.upperElement}>\r\n\r\n                    <button\r\n                        className='close-menu-btn option-text-m'\r\n                        onClick={this.closeMenuBox}>\r\n                        disable menu\r\n                        </button>\r\n                    <Navigation\r\n                        object={navigation}>\r\n\r\n                    </Navigation>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    renderBtn = () => {\r\n        return (\r\n            <div\r\n                className=\"btn open-menu-btn\"\r\n                style={style.unabledElement}\r\n                onClick={this.openMenuBox}>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        if (this.state.menu) {\r\n            return this.renderMenu();\r\n        } else {\r\n            return this.renderBtn();\r\n        }\r\n    }\r\n}\r\n\r\nexport default NavMenu;\r\n\r\n//test data\r\n\r\nlet navigation = {\r\n    \"Проективная геометрия\": {\r\n        \"task1\": \"text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 \",\r\n        \"task2\": \"text2 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 \",\r\n        \"task3\": \"text3 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 \"\r\n    },\r\n    \"Компьютерное зрение\": {\r\n        \"Классификатор маркеров\": \"Имеются изображения маркеров 8 типов. Задача - написать классификатор маркеров, который по одному изображению говорит его id и разворот относительно оригинального изображения.'+'<br></br>'+'Для получения оригинальных изображений и их id следует отправить запрос на сервер с коммандо get_omarkers Для получения маркеров со стенда, которые следует распознать нужно отправить запрос на сервер get_merkerks Для проверки реализованного классификатора нужно сначала обратиться к серверу для получения маркеров расположенных на стенде, затем отправить запрос на проверку с командой check, в котором нужно передать массив типа [(id, x, y, r),...].\",\r\n        \"task2\": \"text2 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 \",\r\n        \"task3\": \"text3 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 text1 \"\r\n    }\r\n}\r\n\r\n\r\n","import React, { createElement } from 'react';\r\nimport '../App.css';\r\nimport '../style/buttons.css';\r\nimport style from '../style/style';\r\n\r\nclass Notification extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = { notification: false };\r\n    }\r\n\r\n    openNotPanel = () => {\r\n        this.setState({ notification: true });\r\n    }\r\n    closeNotPanel = () => {\r\n        this.setState({ notification: false });\r\n    }\r\n\r\n    renderBtn = () => {\r\n        return (\r\n            <button\r\n                className=\"btn not-open-btn\"\r\n                style={style.unabledElement}\r\n                onClick={this.openNotPanel}>\r\n\r\n            </button>\r\n        );\r\n    }\r\n    renderBox = () => {\r\n        return (\r\n            <div className=\"screen not-panel-align\">\r\n                <div\r\n                    className=\"gray-screen\"\r\n                    style={style.lowerElement}>\r\n                </div>\r\n\r\n                <div\r\n                    className='msg-box'\r\n                    style={style.upperElement}>\r\n                    <button className='btn not-close-btn' onClick={this.closeNotPanel}></button>\r\n                    <div className='not-text normal-text'>{msg + msg + msg}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.notification) {\r\n            return this.renderBox();\r\n        } else {\r\n            return this.renderBtn();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Notification;\r\n\r\n//test data\r\nlet msg = \"в этом окне будетт выводиться различная инвормация для пользователя. То есть может выводится контент любого типа.\"","import React, { createElement } from 'react';\r\nimport '../App.css';\r\n\r\nfunction Message(props) {\r\n    return (\r\n        <div className=\"message blck-border\">\r\n            <div className=\"content-box option-text-s\">{props.content}</div>\r\n            <div className=\"time-box small-text\">{props.time + ' ' + props.date}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, { createElement } from 'react';\r\nimport '../App.css';\r\nimport '../style/buttons.css';\r\nimport style from '../style/style';\r\nimport Message from './Message';\r\n\r\n\r\n\r\nclass Chat extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = { chat: false }\r\n    }\r\n    openChatBox = () => {\r\n        this.setState({ chat: true })\r\n    }\r\n    closeChatBox = () => {\r\n        this.setState({ chat: false })\r\n    }\r\n    renderChat = () => {\r\n        return (\r\n            <div className=\"chat-box blck-border\">\r\n                <button\r\n                    className=\"close-chat-btn option-text-m\"\r\n                    onClick={this.closeChatBox}>\r\n                    disable chat\r\n                </button>\r\n                <Message\r\n                    content={message.content}\r\n                    date={message.date}\r\n                    time={message.time}\r\n                ></Message>\r\n                <Message\r\n                    content={message2.content}\r\n                    date={message2.date}\r\n                    time={message2.time}\r\n                ></Message>\r\n            </div >\r\n        );\r\n    }\r\n    renderBtn = () => {\r\n        return (\r\n            <div\r\n                className=\"btn open-chat-btn\"\r\n                style={style.unabledElement}\r\n                onClick={this.openChatBox}>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        if (this.state.chat) {\r\n            return this.renderChat();\r\n        } else {\r\n            return this.renderBtn();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Chat;\r\n\r\n//test data \r\nlet message = {\r\n\r\n    content: \"минимум одна задача должна быть сдана в течении 15 минут. Открыт доступ к следующей задаче.\",\r\n    date: \"25.04.20\",\r\n    time: \"14:32\"\r\n}\r\n\r\nlet message2 = {\r\n\r\n    content: \"минимум одна задача должна быть сдана в течении 15 минут. Открыт доступ к следующей задаче.\",\r\n    date: \"27.04.20\",\r\n    time: \"15:32\"\r\n}","import React from 'react';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Main from './components/Main';\r\nimport NavMenu from './components/NavMenu';\r\nimport Notification from './components/Notification';\r\nimport Chat from './components/Chat';\r\nimport './App.css';\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Notification />\r\n      <NavMenu />\r\n      <Chat />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}