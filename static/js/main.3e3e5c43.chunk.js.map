{"version":3,"sources":["modules/Requests.js","components/main/GlobalState.js","components/auth/AuthFun.js","modules/style.js","components/small/navigation/NavItems.js","components/small/navigation/NavigationFun.js","components/small/navigation/NavMenuFun.js","modules/dateProcessing.js","components/small/chat/Message.js","components/small/chat/ChatFun.js","components/small/points/Bar.js","components/small/points/Circle.js","modules/countProcessing.js","components/small/points/Timer.js","components/small/points/Points.js","components/game/gameClass.js","components/small/NotificationFun.js","components/task/LineFun.js","components/task/TableFun.js","components/task/Task.js","components/main/Info.js","components/task/RenderTasks.js","components/preloader/LoaderFun.js","components/main/MainFun.js","components/main/Header.js","components/main/Footer.js","App.js","serviceWorker.js","index.js"],"names":["server","sendGet","path","Axios","get","headers","sessionStorage","token","then","result","data","actions","updateContest","store","a","newValue","setState","contest","undefined","updateNotifications","notifications","updateTasks","tasks","updateAnswers","answers","setIsLoaded","value","isLoaded","setIsUpdated","isUpdated","setIsAuth","isAuth","useGlobal","globalHook","React","Auth","props","usernameRef","useRef","passwordRef","submitButton","username","current","password","t","post","globalActions","setItem","key","className","type","ref","onClick","FormValid","useEffect","to","from","style","txt4circle","font","title","marginTop","task","heading","subHeading","text","upperElement","zIndex","lowerElement","unabledElement","NavItemTask","id","name","NavItemInfo","Navigation","useState","taskArray1","setTaskArray1","taskArray2","setTaskArray2","taskArray3","setTaskArray3","globalState","array1","map","el","task_block","task_type","array2","array3","NavMenu","state","openMenuBox","closeMenuBox","dateCleaner","date","d","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","setTime","sec","time","Math","floor","ceil","mid","timeStr","forEach","element","String","padStart","slice","getDurationinSec","str","objs","split","parts","Number","Message","content","Chat","status","setStatus","messages","openChatBox","closeChatBox","messageArray","date_send","Bar","backgroundColor","color","width","height","position","Circle","num","x","showScore","countWidth","variant","invariant","countScore","array","score","points","progress","Timer","seconds","setSeconds","maxSec","setMaxSec","interval","setInterval","curDate","duration","startTime","curTime","start","round","abs","getTimeDiff","clearInterval","Points","DATE_DEFAULT","setScore","maxScore","setMaxScore","setStartTime","setDuration","date_start","Game","Component","Player","player","y","action","Notification","openNotPanel","closeNotPanel","msg","Line","message","setMessage","setStyle","error","Table","answerArray","setAnswerArray","answer","user_task","Task","setPoints","Info","console","log","RenderTasks","exact","render","Loader","Animation","Main","loadData","updateData","p1","p2","p3","p4","Promise","all","val","Header","Footer","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"sbAEIA,EAAS,4BAEN,SAASC,EAAQC,GACtB,OAAOC,IAAMC,IAAN,UAAaJ,EAAb,kBAA6BE,GAAQ,CAC1CG,QAAS,CACP,eAAgB,iCAChB,cAAiB,SAAWC,eAAeC,SAE5CC,MAAK,SAACC,GACP,OAAOA,EAAOC,QCPlB,IAWMC,EAAU,CACZC,cAAc,WAAD,4BAAE,WAAOC,GAAP,eAAAC,EAAA,sEACYb,EAAQ,YADpB,UACLc,EADK,OAGXF,EAAMG,SAAS,CAAEC,QAASF,EAASL,KAAK,KACvB,OAAbK,QAAyCG,WAAbH,EAJrB,0CAKA,GALA,iCAOA,GAPA,2CAAF,mDAAC,GASdI,oBAAoB,WAAD,4BAAE,WAAON,GAAP,eAAAC,EAAA,sEACIb,EAAQ,iBADZ,UACbc,EADa,OAEjBF,EAAMG,SAAS,CAAEI,cAAeL,EAASL,OACxB,OAAbK,QAAyCG,WAAbH,EAHf,0CAIN,GAJM,iCAMN,GANM,2CAAF,mDAAC,GAQpBM,YAAY,WAAD,4BAAE,WAAOR,GAAP,eAAAC,EAAA,sEACYb,EAAQ,SADpB,UACLc,EADK,OAETF,EAAMG,SAAS,CAAEM,MAAOP,EAASL,OAChB,OAAbK,QAAyCG,WAAbH,EAHvB,0CAIE,GAJF,iCAME,GANF,2CAAF,mDAAC,GAQZQ,cAAc,WAAD,4BAAE,WAAOV,GAAP,eAAAC,EAAA,sEACUb,EAAQ,WADlB,UACPc,EADO,OAEXF,EAAMG,SAAS,CAAEQ,QAAST,EAASL,OAClB,OAAbK,QAAyCG,WAAbH,EAHrB,0CAIA,GAJA,iCAMA,GANA,2CAAF,mDAAC,GASdU,YAAa,SAACZ,EAAOa,GACjBb,EAAMG,SAAS,CAAEW,SAAUD,KAE/BE,aAAc,SAACf,EAAOa,GAClBb,EAAMG,SAAS,CAAEa,UAAWH,KAEhCI,UAAW,SAACjB,EAAOa,GACfb,EAAMG,SAAS,CAAEe,OAAQL,MAIpBM,EAAYC,YAAWC,IAzDf,CACjBjB,QAAS,GACTK,MAAO,GACPF,cAAe,GACfI,QAAS,GACTK,WAAW,EACXF,UAAU,EACVI,OAAQ,MAkD6CpB,GCpB1CwB,EApCF,SAACC,GAEV,IAAIC,EAAcC,mBACdC,EAAcD,mBAEZE,EAAY,uCAAG,8BAAA1B,EAAA,6DFKAZ,EEFA,cFEMQ,EEFS,CAC5B+B,SAAUJ,EAAYK,QAAQhB,MAC9BiB,SAAUJ,EAAYG,QAAQhB,OAF9BkB,EFMHzC,IAAM0C,KAAN,UAAc7C,EAAd,kBAA8BE,GAAQQ,EAAM,CACjDL,QAJc,CACd,eAAgB,oCAIfG,MAAK,SAACC,GACP,OAAOA,EAAOC,QEZO,SAOCkC,EAPD,QAObrC,EAPa,SAUb6B,EAAMU,cAAchB,WAAU,GAC9BxB,eAAeyC,QAAQ,QAASxC,EAAMyC,MAEtCZ,EAAMU,cAAchB,WAAU,GAbjB,iCFKlB,IAAkB5B,EAAMQ,IELN,OAAH,qDAiBlB,OACI,yBAAKuC,UAAU,QAEX,0BAAMA,UAAU,2BAEZ,2BAAOC,KAAK,OAAOC,IAAKd,EAAaY,UAAU,UAC/C,2BAAOC,KAAK,WAAWC,IAAKZ,EAAaU,UAAU,UAEnD,2BAAOC,KAAK,SAASxB,MAAM,iCAAQuB,UAAU,gBAAgBG,QAASZ,IACtE,kBAAC,EAAD,CAAWT,OAAQK,EAAML,OAAQe,cAAeV,EAAMU,mBAQhEO,EAAY,SAACjB,GAIf,OAFAkB,qBAAU,cAAW,CAAClB,EAAML,SAExBK,EAAML,OAEF,kBAAC,IAAD,CAAUwB,GAAG,YAAYC,KAAK,WAEZ,IAAjBpB,EAAML,OAEP,0CAEkB,OAAjBK,EAAML,OAEP,gEAFH,GCxBM0B,G,MA/BD,CAEVC,WAAY,CACRC,KAAM,uCAEVC,MAAO,CACHC,UAAW,QAEfC,KAAM,CACFD,UAAW,QAEfE,QAAS,CACLJ,KAAM,qCAEVK,WAAY,CACRL,KAAM,qCAEVM,KAAM,CACFN,KAAM,qCAEVO,aAAa,CACTC,OAAQ,QAEZC,aAAa,CACTD,OAAQ,MAEZE,eAAe,CACXF,OAAQ,OCxBHG,EAAc,SAAClC,GAExB,IAAIlC,EAAO,WAAakC,EAAMmC,GAC9B,OACI,wBAAIvB,IAAKZ,EAAMmC,IAAI,kBAAC,IAAD,CAAShB,GAAIrD,GAAOkC,EAAMoC,MAA7C,MAGKC,EAAc,SAACrC,GAExB,IAAIlC,EAAO,WAAakC,EAAMmC,GAC9B,OACI,wBAAIvB,IAAKZ,EAAMmC,IAAI,kBAAC,IAAD,CAAShB,GAAIrD,GAAb,gEAAnB,MCyDOwE,EApEI,SAACtC,GAAW,IAAD,EAEQuC,qBAFR,mBAErBC,EAFqB,KAETC,EAFS,OAGQF,qBAHR,mBAGrBG,EAHqB,KAGTC,EAHS,OAIQJ,qBAJR,mBAIrBK,EAJqB,KAITC,EAJS,KAiD1B,OA1CA3B,qBAAU,WACN,IACIhC,EADUc,EAAM8C,YAAYjE,QACZK,MAEhB6D,EAAS7D,EAAM8D,KACf,SAACC,GACG,OAAsB,IAAlBA,EAAGC,WACkB,IAAjBD,EAAGE,UACI,kBAAC,EAAD,CAAavC,IAAKqC,EAAGd,GAAIC,KAAMa,EAAGzB,MAAOW,GAAIc,EAAGd,KAEhD,kBAAC,EAAD,CAAavB,IAAKqC,EAAGd,GAAIC,KAAMa,EAAGzB,MAAOW,GAAIc,EAAGd,KAEnD,QAGpBM,EAAcM,GACd,IAAIK,EAASlE,EAAM8D,KACf,SAACC,GACG,OAAsB,IAAlBA,EAAGC,WACkB,IAAjBD,EAAGE,UACI,kBAAC,EAAD,CAAavC,IAAKqC,EAAGd,GAAIC,KAAMa,EAAGzB,MAAOW,GAAIc,EAAGd,KAEhD,kBAAC,EAAD,CAAavB,IAAKqC,EAAGd,GAAIC,KAAMa,EAAGzB,MAAOW,GAAIc,EAAGd,KAEnD,QAGpBQ,EAAcS,GACd,IAAIC,EAASnE,EAAM8D,KACf,SAACC,GACG,OAAsB,IAAlBA,EAAGC,WACkB,IAAjBD,EAAGE,UACI,kBAAC,EAAD,CAAavC,IAAKqC,EAAGd,GAAIC,KAAMa,EAAGzB,MAAOW,GAAIc,EAAGd,KAEhD,kBAAC,EAAD,CAAavB,IAAKqC,EAAGd,GAAIC,KAAMa,EAAGzB,MAAOW,GAAIc,EAAGd,KAEnD,QAGpBU,EAAcQ,KACf,CAACrD,EAAM8C,YAAYjE,UAGlB,6BACI,wBAAIgC,UAAU,iBAAd,yCAEK2B,GAEL,wBAAI3B,UAAU,iBAAd,yCAEK6B,GAEL,wBAAI7B,UAAU,iBAAd,yCAEK+B,KCPFU,EAnDC,SAACtD,GAAW,IAAD,EAECuC,qBAFD,mBAElBgB,EAFkB,KAEX3E,EAFW,KAIjB4E,EAAc,WAChB5E,GAAS,IAEP6E,EAAe,WACjB7E,GAAS,IAsCb,OACI2E,EAAQ,mBArCO,WACf,OACI,yBAAK1C,UAAU,UAEX,yBACIA,UAAU,cACVG,QAASyC,EACTpC,MAAOA,EAAMW,eAGjB,yBACInB,UAAU,UACVQ,MAAOA,EAAMS,cASb,kBAAC,EAAD,CAAYgB,YAAa9C,EAAM8C,kBAgBnC,MAAiB,mBAXX,WACd,OACI,yBACIjC,UAAU,oBACVQ,MAAOA,EAAMY,eACbjB,QAASwC,MAMQ,OCpDtBE,EAAc,SAACC,GACtB,IAAIC,EAAI,IAAIC,KAAKF,GAEjB,OACIC,EAAEE,cAAgB,IAAMF,EAAEG,WAAa,IAAMH,EAAEI,UAAY,KACzDJ,EAAEK,WAAa,IAAML,EAAEM,aAAe,IAAMN,EAAEO,aAAe,MA2B5DC,EAAU,SAACC,GAClB,IAAIC,EAAO,GAEPA,EAAK,GADLD,EAAM,MAAQ,EACJE,KAAKC,MAAMH,EAAM,MAEjBE,KAAKE,KAAKJ,EAAM,MAE9B,IAAIK,EAAML,EAAM,KAEZC,EAAK,GADLI,EAAM,IAAM,EACFH,KAAKC,MAAME,EAAM,IAEjBH,KAAKE,KAAKC,EAAM,IAE9BJ,EAAK,GAAKI,EAAM,GAEhB,IAAIC,EAAU,GAOd,OANAL,EAAKM,SAAQ,SAAAC,GACLA,EAAU,IACVA,EAAU,GACdF,GAAWG,OAAOD,GAASE,SAAS,EAAG,GAAK,OAEhDJ,EAAUA,EAAQK,MAAM,GAAI,IAYrBC,EAAmB,SAACC,GAC3B,IAAIC,EAAOD,EAAIE,MAAM,KACrB,OAAiB,GAAVD,EAAK,GAAU,KAhDF,SAACb,GAErB,QAAoBxF,WAATwF,EAAoB,CAC3B,IAAIe,EAAQf,EAAKc,MAAM,KACnBf,EAAM,EAIV,OAHAgB,EAAMT,SAAQ,SAAAC,GACVR,EAAMiB,OAAa,GAANjB,EAAWiB,OAAOT,OAE5BR,EAEN,MA/BY,WAqEYF,CAAWgB,EAAK,KCvDlCI,EAVC,SAACvF,GAEb,OACI,yBAAKa,UAAU,sBAAsBD,IAAKZ,EAAMmC,IAC5C,yBAAKtB,UAAU,6BAA6Bb,EAAMwF,SAClD,yBAAK3E,UAAU,uBAAuB6C,EAAY1D,EAAM2D,SCgDrD8B,EAjDF,SAACzF,GAAW,IAAD,EAEMuC,oBAAS,GAFf,mBAEfmD,EAFe,KAEPC,EAFO,KAIhBC,EAAW5F,EAAM8C,YAAY9D,cAC3B6G,EAAc,WAChBF,GAAU,IAERG,EAAe,WACjBH,GAAU,IAkCd,OAAQ,yBAAK9E,UAAU,QAClB6E,EAAS,mBArBK,SAAC1F,GAGhB,IAAI+F,EAAe/F,EAAM4F,SAAS5C,KAC9B,SAACC,GAAD,OAAQ,kBAAC,EAAD,CAASrC,IAAKqC,EAAGd,GAAIqD,QAASvC,EAAGpB,KAAM8B,KAAMV,EAAG+C,eAG5D,OACI,yBAAKnF,UAAU,wBACX,4BACIA,UAAU,+BACVG,QAAS8E,GAFb,gBAKCC,KAOC,CAAYH,SAAUA,IAAe,mBAhCjC,WACd,OACI,yBACI/E,UAAU,oBACVQ,MAAOA,EAAMY,eACbjB,QAAS6E,MA2B8B,Q,MC9BxCI,MAnBf,SAAajG,GAET,OACI,yBAAKa,UAAU,iCACX,yBAAKQ,MAAO,CACR6E,gBAAiBlG,EAAMmG,MACvBC,MAAqB,EAAdpG,EAAMoG,MAAU,KACvBC,OAAQ,UAEZ,yBAAKhF,MAAO,CACRiF,SAAU,UACV7E,UAAW,UAEVzB,EAAMwF,WCaRe,MAxBf,SAAgBvG,GAcZ,OACI,yBAAKa,UAAU,sBACX,yBAAKQ,MAAOA,EAAMC,YAd1B,SAAmBkF,GAEf,IAAIC,EAAID,EAAM,GACd,OAAU,IAANC,GAAmB,KAARD,EACHA,EAAM,kCACA,IAANC,GAAiB,IAANA,GAAiB,IAANA,GAAqB,KAARD,GAAsB,KAARA,GAAsB,KAARA,EAG/DA,EAAM,wCAFNA,EAAM,kCASbE,CAAU1G,EAAMwF,YCtBlBmB,EAAa,SAACC,EAASC,GAC9B,OAAOtC,KAAKE,KAAKmC,EAAUC,EAAY,MAGhCC,EAAa,SAACC,EAAOjG,GAC5B,IAAIkG,EAAQ,EAMZ,OALAD,EAAMnC,SAAQ,SAAA3B,GAEN+D,GADK,QAATlG,EACamC,EAAGvB,KAAKuF,OACRhE,EAAGiE,YAEbF,GC8BIG,EApCD,SAACnH,GAAW,IAAD,EAGKuC,mBAAS,GAHd,mBAGlB6E,EAHkB,KAGTC,EAHS,OAIG9E,mBAAS,GAJZ,mBAIlB+E,EAJkB,KAIVC,EAJU,KAyBvB,OAnBArG,qBAAU,WAER,IAAIsG,EACJ,GAAgB,IAAZJ,EACFI,EAAWC,aAAY,WACrBJ,GAAW,SAAAD,GAAO,OAAIA,EAAU,OAC/B,SAEE,CAEL,IAAIM,EAAU,IAAI7D,KAClB0D,EAAUtC,EAAiBjF,EAAM2H,WACjCN,EAAWpC,EAAiBjF,EAAM2H,UNoCf,SAACC,EAAWC,GAEjC,IAAIC,EAAQ,IAAIjE,KAAK+D,GACjBtH,EAAU,IAAIuD,KAAKgE,GAEvB,OAAOtD,KAAKwD,MAAMxD,KAAKyD,IAAIF,EAAQxH,GAAW,KMzCE2H,CAAYjI,EAAM4H,UAAWF,IAG7E,OAAO,kBAAMQ,cAAcV,MAE1B,CAACJ,EAASpH,EAAM2H,SAAU3H,EAAM4H,YAGjC,yBAAK/G,UAAU,IACb,kBAAC,EAAD,CACEuF,MAAOO,EAAWS,EAASE,GAC3BnB,MAAM,UACNX,QAASpB,EAAQgD,OCqBVe,EA9CA,SAACnI,GAEZ,IACMoI,EAAe,IAAIvE,KAHH,EAKEtB,mBAAS,GALX,mBAKjByE,EALiB,KAKVqB,EALU,OAMQ9F,mBAAS,GANjB,mBAMjB+F,EANiB,KAMPC,EANO,OAOUhG,mBAAS6F,GAPnB,mBAOjBR,EAPiB,KAONY,EAPM,OAQQjG,mBANT,cAFC,mBAQjBoF,EARiB,KAQPc,EARO,KA0BtB,OAfAvH,qBAAU,WAGN,IAAIrC,EAAUmB,EAAM8C,YAAYjE,QAE5BqI,EAAWlH,EAAM8C,YAAY5D,MAGjCsJ,EAAa3J,EAAQ6J,YACrBD,EAAY5J,EAAQ8I,UACpBU,EAASvB,EAAWI,EAAU,cAC9BqB,EAAYzB,EAAWI,EAAU,UAElC,CAAClH,EAAMgH,MAAOhH,EAAM8C,YAAYjE,QAASmB,EAAM8C,YAAY5D,QAG1D,yBAAK2B,UAAU,UACX,yBAAKA,UAAU,QACX,kBAAC,EAAD,CACIuF,MAAOO,EAAWK,EAAOsB,GACzBnC,MAAM,UACNX,QAAS,sDAAgBmB,EAAWK,EAAOsB,GAAY,MAE3D,kBAAC,EAAD,CACIV,UAAWA,EACXD,SAAUA,KAGlB,kBAAC,EAAD,CACInC,QAASwB,M,wCClCV2B,G,oOAPP,OACI,yBAAK9H,UAAU,cACX,kBAAC,EAAD,W,GARG+H,cAebC,E,YACF,WAAY7I,GAAQ,IAAD,8BACf,+CACKuD,MAAQ,CACTuF,OAAQ,CACJrC,EAAG,GACHsC,EAAG,IACH1C,OAAQ,IACRD,MAAO,GACP4C,OAAQ,SARD,E,sEAaf,OACI,yBAAKnI,UAAU,a,GAfN+H,aCoCNK,EA/CM,SAACjJ,GAAW,IAAD,EAEJuC,oBAAS,GAFL,mBAEvBgB,EAFuB,KAEhB3E,EAFgB,KAItBsK,EAAe,WACjBtK,GAAS,IAEPuK,EAAgB,WAClBvK,GAAS,IAkCb,OACI2E,EAAQ,mBAtBM,WACd,OACI,yBAAK1C,UAAU,0BACX,yBACIA,UAAU,cACVQ,MAAOA,EAAMW,eAGjB,yBACInB,UAAU,UACVQ,MAAOA,EAAMS,cACb,4BAAQjB,UAAU,oBAAoBG,QAASmI,IAC/C,yBAAKtI,UAAU,wBAAwBuI,IAG3C,kBAAC,EAAD,SAOA,MAAgB,mBAhCV,WACd,OACI,4BACIvI,UAAU,mBACVQ,MAAOA,EAAMY,eACbjB,QAASkI,MA2BO,OAM5BE,EAAM,0TCrBKC,G,MA9BF,SAACrJ,GAAW,IAAD,EAEIuC,mBAAS,KAFb,mBAEfyE,EAFe,KAERqB,EAFQ,OAGQ9F,mBAAS,IAHjB,mBAGf+G,EAHe,KAGNC,EAHM,OAIIhH,mBAAS,SAJb,mBAIflB,EAJe,KAIRmI,EAJQ,KAmBpB,OAbAtI,qBAAU,WACc,OAAhBlB,EAAMyJ,OACNpB,EAASrI,EAAM3B,QACfkL,EAAWvJ,EAAM6B,MACjB2H,EAAS,WAETnB,EAAS,KACTkB,EAAWvJ,EAAMyJ,OACjBD,EAAS,YAEd,CAACxJ,EAAMyJ,MAAOzJ,EAAM6B,KAAM7B,EAAM3B,SAI/B,wBAAIuC,IAAKZ,EAAMmC,IACX,wBAAItB,UAAS,eAAUQ,IAClBqC,EAAY1D,EAAM2D,MAAQ2F,GAE/B,wBAAIzI,UAAU,UAAUmG,EAAO,IAAKhH,EAAMiH,WCsBvCyC,EA7CD,SAAC1J,GAAW,IAAD,EAGeuC,qBAHf,mBAGhBoH,EAHgB,KAGHC,EAHG,KAwBrB,OAhBA1I,qBAAU,WAEN,IACI2I,EADU7J,EAAM8C,YAAY1D,QACX4D,KACjB,SAAUC,GACN,GAAIA,EAAG6G,YAAc9J,EAAMmC,GACvB,OAAgB,MAAZc,EAAGwG,MACI,kBAAC,EAAD,CAAM7I,IAAKqC,EAAGd,GAAIN,KAAMoB,EAAG3E,KAAMqF,KAAMV,EAAG+C,UAAWyD,MAAO,KAAMpL,OAAQ4E,EAAG5E,OAAQ4I,OAAQjH,EAAMiH,SAClG,kBAAC,EAAD,CAAMrG,IAAKqC,EAAGd,GAAIN,KAAM,KAAM8B,KAAMV,EAAG+C,UAAWyD,MAAOxG,EAAGwG,MAAOpL,OAAQ4E,EAAG5E,OAAQ4I,OAAQjH,EAAMiH,YAI5H2C,EAAeC,KAChB,CAAC7J,EAAMmC,GAAInC,EAAMiH,OAAQjH,EAAM8C,YAAY1D,UAI1C,6BACI,6BACA,6BACA,6BACA,6BACA,6BACA,2BAAOyB,UAAU,iBACb,+BACI,4BACI,0EACA,+DAEH8I,MClBNI,EApBF,SAAC/J,GAAW,IAAD,EAEMuC,mBAAS,IAFf,mBAEf0E,EAFe,KAEP+C,EAFO,KASpB,OANA9I,qBAAU,WAGN8I,EAAUhK,EAAMiH,UACjB,CAACjH,EAAMiH,SAIN,6BACI,yBAAKpG,UAAU,kBAAkBb,EAAM0B,KAAKF,OAC5C,yBAAKX,UAAU,oBAAoBb,EAAM0B,KAAKG,MAC9C,kBAAC,EAAD,CAAOM,GAAInC,EAAM0B,KAAKS,GAAI8E,OAAQA,EAAQnE,YAAa9C,EAAM8C,gBCA1DmH,EAhBF,SAACjK,GAOV,OALAkB,qBAAU,WAENgJ,QAAQC,IAAInK,KACb,IAGC,yBAAKa,UAAU,QACX,yBAAKA,UAAU,kBAAkBb,EAAMwB,OACvC,yBAAKX,UAAU,eAAeb,EAAM6B,QCQjCuI,EAfK,SAACpK,GAajB,OAXYA,EAAM8C,YAAY5D,MAAM8D,KAChC,SAACC,GAAD,OAC0B,IAAtBA,EAAGvB,KAAKyB,UACR,kBAAC,IAAD,CACIkH,OAAK,EAACvM,KAAM,WAAamF,EAAGvB,KAAKS,GACjCmI,OAAQ,kBAAM,kBAAC,EAAD,CAAMrD,OAAQhE,EAAGvB,KAAKuF,OAAQvF,KAAMuB,EAAGvB,KAAMoB,YAAa9C,EAAM8C,iBAChF,kBAAC,IAAD,CACEuH,OAAK,EAACvM,KAAM,WAAamF,EAAGvB,KAAKS,GACjCmI,OAAQ,kBAAM,kBAAC,EAAD,CAAM9I,MAAOyB,EAAGvB,KAAKF,MAAOK,KAAMoB,EAAGvB,KAAKG,cCAzD0I,G,MAZA,SAACvK,GAIZ,OAFAkB,qBAAU,cAAO,CAAClB,EAAM8C,YAAYvD,WAGhC,6BACKS,EAAM8C,YAAYvD,SACX,kBAAC,IAAD,CAAU4B,GAAG,YAAYC,KAAK,cAC5B,kBAAC,EAAD,SAMhBoJ,EAAY,WACd,OACI,yBAAK3J,UAAU,aACX,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,+BACxB,yBAAKA,UAAU,UAAS,iCCyBrB4J,GA3CF,SAACzK,GAuBV,OArBAkB,qBAAU,WACFlB,EAAM8C,YAAYnD,SAEbK,EAAM8C,YAAYvD,UAAUmL,GAAS1K,GAE1CyH,aAAY,WACRkD,GAAW3K,KAGZ,KACHA,EAAMU,cAAclB,cAAa,MAItC,CACCQ,EAAMU,cACNV,EAAM8C,YAAYrD,UAClBO,EAAM8C,YAAYvD,SAClBS,EAAM8C,YAAYnD,SAIlB,6BAEQK,EAAM8C,YAAYvD,SACd,6BACI,kBAAC,EAAD,CAASuD,YAAa9C,EAAM8C,cAC5B,kBAAC,EAAD,CAAMA,YAAa9C,EAAM8C,cACzB,kBAAC,EAAD,MACA,yBAAKjC,UAAU,gBAEX,kBAAC,EAAD,CAAQiC,YAAa9C,EAAM8C,cAC3B,kBAAC,EAAD,CAAa5D,MAAOc,EAAM8C,YAAY5D,MAAO4D,YAAa9C,EAAM8C,gBAGtE,kBAAC,EAAD,CAAQA,YAAa9C,EAAM8C,gBAQ7C4H,GAAQ,uCAAG,WAAO1K,GAAP,qBAAAtB,EAAA,sDAEPkM,EAAK5K,EAAMU,cAAclC,gBAAgBJ,MAAK,SAAUkB,GACxD,OAAOA,KAEPuL,EAAK7K,EAAMU,cAAczB,cAAcb,MAAK,SAAUkB,GACtD,OAAOA,KAEPwL,EAAK9K,EAAMU,cAAcvB,gBAAgBf,MAAK,SAAUkB,GACxD,OAAOA,KAEPyL,EAAK/K,EAAMU,cAAc3B,sBAAsBX,MAAK,SAAUkB,GAC9D,OAAOA,KAGX0L,QAAQC,IAAI,CAACL,EAAIC,EAAIC,EAAIC,IAAK3M,MAAK,SAAA8M,GAE3BA,EAAI,IAAMA,EAAI,IAAMA,EAAI,IAAMA,EAAI,IAClClL,EAAMU,cAAcrB,aAAY,MAlB7B,2CAAH,sDAsBRsL,GAAU,uCAAG,WAAO3K,GAAP,qBAAAtB,EAAA,sDAETkM,EAAK5K,EAAMU,cAAclC,gBAAgBJ,MAAK,SAAUkB,GACxD,OAAOA,KAEPuL,EAAK7K,EAAMU,cAAczB,cAAcb,MAAK,SAAUkB,GACtD,OAAOA,KAEPwL,EAAK9K,EAAMU,cAAcvB,gBAAgBf,MAAK,SAAUkB,GACxD,OAAOA,KAEPyL,EAAK/K,EAAMU,cAAc3B,sBAAsBX,MAAK,SAAUkB,GAC9D,OAAOA,KAGX0L,QAAQC,IAAI,CAACL,EAAIC,EAAIC,EAAIC,IAAK3M,MAAK,SAAA8M,GAE3BA,EAAI,IAAMA,EAAI,IAAMA,EAAI,IAAMA,EAAI,IAClClL,EAAMU,cAAclB,cAAa,MAlB5B,2CAAH,sDCrEC2L,GANA,kBACX,gCACQ,yBAAKtK,UAAU,WCIZuK,OANf,WACI,OACI,kCC4COC,GAnCH,WAAO,IAAD,EAEqBzL,IAFrB,mBAETkD,EAFS,KAEIpC,EAFJ,KAId,OACI,yBAAKG,UAAU,OACX,kBAAC,GAAD,MACA,yBAAKA,UAAU,gBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUM,GAAG,QAAQC,KAAK,aAC1B,kBAAC,IAAD,CACItD,KAAK,YACLwM,OAAQ,kBACJ,kBAAC,EAAD,CAAQxH,YAAaA,EAAapC,cAAeA,OAEzD,kBAAC,IAAD,CACI5C,KAAK,QACLwM,OAAQ,kBACJ,kBAAC,EAAD,CAAM3K,OAAQmD,EAAYnD,OAAQe,cAAeA,OAEzD,kBAAC,IAAD,CACI5C,KAAK,KACLwM,OAAQ,kBACJ,kBAAC,GAAD,CAAMxH,YAAaA,EAAapC,cAAeA,OAGvD,kBAAC,IAAD,CAAO5C,KAAK,QAAQwM,OAAQ,kBAAM,kBAAC,EAAD,WAI1C,kBAAC,GAAD,QChCQgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrB,OAAO,kBAAC,GAAD,MAASsB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5N,MAAK,SAAA6N,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLS,QAAQT,MAAMA,EAAMH,c","file":"static/js/main.3e3e5c43.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nlet server = \"http://api.arstand-lab.ru\";\r\n\r\nexport function sendGet(path) {\r\n  return Axios.get(`${server}/api/0/${path}`, {\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n      'Authorization': 'Token ' + sessionStorage.token\r\n    }\r\n  }).then((result) => {\r\n    return result.data;\r\n  });\r\n}\r\n\r\nexport function sendPost(path, data) {\r\n  const headers = {\r\n    'Content-Type': 'application/json;charset=utf-8'\r\n  };\r\n  return Axios.post(`${server}/api/0/${path}`, data, {\r\n    headers\r\n  }).then((result) => {\r\n    return result.data;\r\n  });\r\n}\r\n\r\n// export let sendGet = async (path) => {\r\n//   let response = await fetch(`${server}/api/0/${path}`, {\r\n//     method: 'GET',\r\n//     headers: {\r\n//       'Content-Type': 'application/json;charset=utf-8',\r\n//       'Authorization': 'Token ' + sessionStorage.token\r\n//     },\r\n//   });\r\n\r\n//   if (response.ok) {\r\n//     let result = await response.json();\r\n//     return result.data;\r\n//   } else {\r\n//     alert(\"Ошибка HTTP: \" + response.status);\r\n//   }\r\n\r\n// }\r\n\r\n\r\n// export let sendPost = async (path, data) => {\r\n//   //const mock_path = \"http://www.mocky.io/v2/5e688e222f0000975bd8ad5c\"\r\n//   console.log(\"startpost\")\r\n\r\n//   let response = await fetch(`${server}/api/0/${path}`, {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       'Content-Type': 'application/json;charset=utf-8'\r\n//     },\r\n//     body: JSON.stringify(data)\r\n//   });\r\n//   let result = await response.json();\r\n//   console.log(\"recieved\", result);\r\n\r\n//   if (typeof result['key'] !== 'undefined') {\r\n//     sessionStorage.setItem('token', result['key']);\r\n//     return (result['key']);\r\n//   }\r\n//   else {\r\n//     sessionStorage.setItem('token', false);\r\n//     return false;\r\n//   }\r\n// }\r\n","import React from 'react';\r\nimport globalHook from 'use-global-hook';\r\nimport { sendGet } from '../../modules/Requests';\r\n\r\nconst initialState = {\r\n    contest: \"\",\r\n    tasks: \"\",\r\n    notifications: \"\",\r\n    answers: \"\",\r\n    isUpdated: false,\r\n    isLoaded: false,\r\n    isAuth: null,\r\n\r\n};\r\n\r\nconst actions = {\r\n    updateContest: async (store) => {\r\n        const newValue = await sendGet(\"contest/\");\r\n        //console.log(newValue.data[0]);\r\n        store.setState({ contest: newValue.data[0] });\r\n        if (newValue !== null && typeof newValue !== undefined)\r\n            return true\r\n        else\r\n            return false\r\n    },\r\n    updateNotifications: async (store) => {\r\n        let newValue = await sendGet(\"notification/\");\r\n        store.setState({ notifications: newValue.data });\r\n        if (newValue !== null && typeof newValue !== undefined)\r\n            return true\r\n        else\r\n            return false\r\n    },\r\n    updateTasks: async (store) => {\r\n        let newValue = await sendGet(\"task/\");\r\n        store.setState({ tasks: newValue.data });\r\n        if (newValue !== null && typeof newValue !== undefined)\r\n            return true\r\n        else\r\n            return false\r\n    },\r\n    updateAnswers: async (store) => {\r\n        let newValue = await sendGet(\"answer/\");\r\n        store.setState({ answers: newValue.data });\r\n        if (newValue !== null && typeof newValue !== undefined)\r\n            return true\r\n        else\r\n            return false\r\n    },\r\n    \r\n    setIsLoaded: (store, value) => {\r\n        store.setState({ isLoaded: value });\r\n    },\r\n    setIsUpdated: (store, value) => {\r\n        store.setState({ isUpdated: value });\r\n    },\r\n    setIsAuth: (store, value) => {\r\n        store.setState({ isAuth: value });\r\n    },\r\n};\r\n\r\nexport const useGlobal = globalHook(React, initialState, actions);","import '../../App.css';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { sendPost } from '../../modules/Requests';\r\n\r\nconst Auth = (props) => {\r\n\r\n    let usernameRef = useRef();\r\n    let passwordRef = useRef();\r\n\r\n    const submitButton = async () => {\r\n\r\n        //console.log(\"submit-button-pressed\")\r\n        let t = sendPost(\"auth/login/\", {\r\n            username: usernameRef.current.value,\r\n            password: passwordRef.current.value,\r\n        });\r\n        let token = await t;\r\n        //console.log(token);\r\n        if (token) {\r\n            props.globalActions.setIsAuth(true);\r\n            sessionStorage.setItem('token', token.key);\r\n        } else {\r\n            props.globalActions.setIsAuth(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"Auth\" >\r\n\r\n            <form className=\"form-auth option-text-m\">\r\n\r\n                <input type=\"text\" ref={usernameRef} className='field' ></input>\r\n                <input type=\"password\" ref={passwordRef} className='field' ></input>\r\n\r\n                <input type=\"button\" value=\"ВОЙТИ\" className='submit-button' onClick={submitButton}></input>\r\n                <FormValid isAuth={props.isAuth} globalActions={props.globalActions} />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default Auth;\r\n\r\n\r\nconst FormValid = (props) => {\r\n\r\n    useEffect(() => { }, [props.isAuth])\r\n\r\n    if (props.isAuth) {\r\n        return (\r\n            <Redirect to=\"/0/loader\" from=\"/auth\" />);\r\n    }\r\n    else if (props.isAuth === false) {\r\n        return (\r\n            <div>try again</div>);\r\n    }\r\n    else if (props.isAuth === null) {\r\n        return (\r\n            <div> type your login/password </div>);\r\n    }\r\n}","\r\nconst style = {\r\n\r\n    txt4circle: {\r\n        font: \" 400 16px 'Montserrat', sans- serif\",\r\n    },\r\n    title: {\r\n        marginTop: \"40px\",\r\n    },\r\n    task: {\r\n        marginTop: \"70px\",\r\n    },\r\n    heading: {\r\n        font: \"400 60px 'Montserrat', sans-serif\",\r\n    },\r\n    subHeading: {\r\n        font: \"400 36px 'Montserrat', sans-serif\",\r\n    },\r\n    text: {\r\n        font: \"400 24px 'Montserrat', sans-serif\",\r\n    },\r\n    upperElement:{\r\n        zIndex: \"9999\",\r\n    },\r\n    lowerElement:{\r\n        zIndex: \"98\",\r\n    },\r\n    unabledElement:{\r\n        zIndex: \"0\"\r\n    }\r\n};\r\n\r\nexport default style;","import '../../../App.css';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const NavItemTask = (props) => {\r\n\r\n    let path = '/0/task/' + props.id;\r\n    return (\r\n        <li key={props.id}><NavLink to={path}>{props.name}</NavLink> </li>\r\n    );\r\n}\r\nexport const NavItemInfo = (props) => {\r\n\r\n    let path = '/0/info/' + props.id;\r\n    return (\r\n        <li key={props.id}><NavLink to={path}>Информация</NavLink> </li>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport '../../../App.css';\r\nimport { NavItemInfo, NavItemTask } from './NavItems';\r\n\r\nconst Navigation = (props) => {\r\n\r\n    let [taskArray1, setTaskArray1] = useState();\r\n    let [taskArray2, setTaskArray2] = useState();\r\n    let [taskArray3, setTaskArray3] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        let contest = props.globalState.contest;\r\n        let tasks = contest.tasks;\r\n\r\n        let array1 = tasks.map(\r\n            (el) => {\r\n                if (el.task_block === 1) {\r\n                    if (el.task_type === 1)\r\n                        return <NavItemTask key={el.id} name={el.title} id={el.id} />\r\n                    else\r\n                        return <NavItemInfo key={el.id} name={el.title} id={el.id} />\r\n                }\r\n                else return null;\r\n            }\r\n        );\r\n        setTaskArray1(array1);\r\n        let array2 = tasks.map(\r\n            (el) => {\r\n                if (el.task_block === 2) {\r\n                    if (el.task_type === 1)\r\n                        return <NavItemTask key={el.id} name={el.title} id={el.id} />\r\n                    else\r\n                        return <NavItemInfo key={el.id} name={el.title} id={el.id} />\r\n                }\r\n                else return null;\r\n            }\r\n        );\r\n        setTaskArray2(array2);\r\n        let array3 = tasks.map(\r\n            (el) => {\r\n                if (el.task_block === 3) {\r\n                    if (el.task_type === 1)\r\n                        return <NavItemTask key={el.id} name={el.title} id={el.id} />\r\n                    else\r\n                        return <NavItemInfo key={el.id} name={el.title} id={el.id} />\r\n                }\r\n                else return null;\r\n            }\r\n        );\r\n        setTaskArray3(array3);\r\n    }, [props.globalState.contest]);\r\n\r\n    return (\r\n        <div>\r\n            <ul className=\"option-text-m\">\r\n                Раздел 1\r\n                {taskArray1}\r\n            </ul>\r\n            <ul className=\"option-text-m\">\r\n                Раздел 2\r\n                {taskArray2}\r\n            </ul>\r\n            <ul className=\"option-text-m\">\r\n                Раздел 3\r\n                {taskArray3}\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useState } from 'react';\r\nimport '../../../App.css';\r\nimport '../../small/buttons.css';\r\nimport style from '../../../modules/style';\r\nimport Navigation from './NavigationFun';\r\n\r\n\r\nconst NavMenu = (props) => {\r\n\r\n    let [state, setState] = useState();\r\n\r\n    const openMenuBox = () => {\r\n        setState(true);\r\n    }\r\n    const closeMenuBox = () => {\r\n        setState(false);\r\n    }\r\n    const RenderMenu = () => {\r\n        return (\r\n            <div className=\"screen\">\r\n\r\n                <div\r\n                    className=\"gray-screen\"\r\n                    onClick={closeMenuBox}\r\n                    style={style.lowerElement}>\r\n                </div>\r\n\r\n                <div\r\n                    className='nav-bar'\r\n                    style={style.upperElement}>\r\n                    {/*\r\n                    <button\r\n                        className='close-menu-btn option-text-m'\r\n                        onClick={closeMenuBox}>\r\n                        disable menu\r\n                    </button>\r\n\r\n                    */}\r\n                    <Navigation globalState={props.globalState} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    const RenderBtn = () => {\r\n        return (\r\n            <div\r\n                className=\"btn open-menu-btn\"\r\n                style={style.unabledElement}\r\n                onClick={openMenuBox}>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        state ? <RenderMenu /> : <RenderBtn />\r\n    );\r\n}\r\n\r\nexport default NavMenu;","const TIME_DEFAULT = '00:00:00';\r\n\r\nexport let dateCleaner = (date) => { //input data: 2020-02-27T15:24:24Z\r\n    let d = new Date(date);\r\n\r\n    return (\r\n        d.getFullYear() + '.' + d.getMonth() + '.' + d.getDate() + '\\t'\r\n        + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds() + '\\t');\r\n    //output data: 2020.02.24\t16:41:31\r\n}\r\n\r\nexport let getTime = (date) => { //input data: 2020-02-27T15:24:24Z\r\n\r\n    if (typeof date === undefined) {\r\n        let d = new Date(date);\r\n        return d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds();\r\n        //output data: 16:41:31\r\n    }\r\n    else return TIME_DEFAULT;//00:00:00\r\n}\r\n\r\nexport let getSeconds = (time) => {//input data: 16:41:31\r\n\r\n    if (typeof time !== undefined) {\r\n        let parts = time.split(':');\r\n        let sec = 0;\r\n        parts.forEach(element => {\r\n            sec = Number(sec * 60 + Number(element));\r\n        });\r\n        return sec;//output data: 60091\r\n    }\r\n    else return TIME_DEFAULT;\r\n}\r\n\r\nexport let setTime = (sec) => {//input data: 60091\r\n    let time = [];\r\n    if (sec / 3600 >= 0)\r\n        time[0] = Math.floor(sec / 3600);\r\n    else\r\n        time[0] = Math.ceil(sec / 3600);\r\n\r\n    let mid = sec % 3600;\r\n    if (mid / 60 >= 0)\r\n        time[1] = Math.floor(mid / 60);\r\n    else\r\n        time[1] = Math.ceil(mid / 60);\r\n\r\n    time[2] = mid % 60;\r\n\r\n    let timeStr = '';\r\n    time.forEach(element => {\r\n        if (element < 0)\r\n            element = 0;\r\n        timeStr += String(element).padStart(2, 0) + ':';\r\n    });\r\n    timeStr = timeStr.slice(0, -1);\r\n    return timeStr;//output data: 16:41:31\r\n}\r\n\r\nexport let getTimeDiff = (startTime, curTime) => {//input data: 2020-02-27T15:24:24Z 2020-02-27T15:24:24Z\r\n\r\n    let start = new Date(startTime);\r\n    let current = new Date(curTime);\r\n\r\n    return Math.round(Math.abs(start - current) / 1000); //output data: 6049\r\n}\r\n\r\nexport let getDurationinSec = (str) => { //input data: 24 00:00:00 \r\n    let objs = str.split(' ');\r\n    return objs[0] * 24 * 3600 + getSeconds(objs[1]); // output data: 2073604\r\n}","import React from 'react';\r\nimport '../../../App.css';\r\nimport {dateCleaner} from '../../../modules/dateProcessing';\r\n\r\nconst Message = (props) =>{\r\n    \r\n    return (\r\n        <div className=\"message blck-border\" key={props.id}>\r\n            <div className=\"content-box option-text-s\">{props.content}</div>\r\n            <div className=\"time-box small-text\">{dateCleaner(props.date)}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, { useState } from 'react';\r\n\r\nimport '../../../App.css';\r\nimport '../../small/buttons.css';\r\nimport style from '../../../modules/style';\r\n\r\nimport Message from './Message';\r\n\r\nconst Chat = (props) => {\r\n\r\n    let [status, setStatus] = useState(false);\r\n    //let messages = JSON.parse(localStorage.getItem(\"notifications\"));\r\n    let messages = props.globalState.notifications;\r\n    const openChatBox = () => {\r\n        setStatus(true);\r\n    }\r\n    const closeChatBox = () => {\r\n        setStatus(false);\r\n    }\r\n\r\n    const RenderBtn = () => {\r\n        return (\r\n            <div\r\n                className=\"btn open-chat-btn\"\r\n                style={style.unabledElement}\r\n                onClick={openChatBox}>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n    const RenderChat = (props) => {\r\n\r\n        //console.log(props.messages);\r\n        let messageArray = props.messages.map(\r\n            (el) => <Message key={el.id} content={el.text} date={el.date_send} />\r\n        );\r\n\r\n        return (\r\n            <div className=\"chat-box blck-border\">\r\n                <button\r\n                    className=\"close-chat-btn option-text-m\"\r\n                    onClick={closeChatBox}>\r\n                    disable chat\r\n                </button>\r\n                {messageArray}\r\n            </div >\r\n\r\n\r\n        );\r\n    }\r\n    return (<div className=\"chat\">\r\n        {status ? <RenderChat messages={messages} /> : <RenderBtn />}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport '../../../App.css';\r\n\r\nfunction Bar(props) {\r\n\r\n    return (\r\n        <div className='bar blck-border option-text-m'>\r\n            <div style={{\r\n                backgroundColor: props.color,\r\n                width: props.width * 2+'px',\r\n                height: \"100%\"\r\n            }}></div>\r\n            <div style={{\r\n                position: 'inherit',\r\n                marginTop: \"-23px\"\r\n        }}>\r\n                {props.content}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Bar;","import React from 'react';\r\nimport '../../../App.css';\r\nimport style from '../../../modules/style';\r\n\r\n\r\nfunction Circle(props) {\r\n\r\n    function showScore(num) {\r\n\r\n        let x = num % 10;\r\n        if (x === 1 && num !== 11) {\r\n            return (num + \" балла\");\r\n        } else if ((x === 2 || x === 3 || x === 4) && (num !== 12 && num !== 13 && num !== 14)) {\r\n            return (num + \" балла\");\r\n        } else {\r\n            return (num + \" баллов\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='circle blck-border'>\r\n            <div style={style.txt4circle}>\r\n            {showScore(props.content)}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Circle;","export let countWidth = (variant, invariant) => {// input data: 56 200\r\n    return Math.ceil(variant / invariant * 100);//output data: 28\r\n}\r\n\r\nexport let countScore = (array, type) => {//input data: array of tasks, max/real-time\r\n    let score = 0;\r\n    array.forEach(el => {\r\n        type === 'max' ?\r\n            score += el.task.points :\r\n            score += el.progress;\r\n    });\r\n    return score; //output data: 180\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { setTime, getTimeDiff, getDurationinSec } from '../../../modules/dateProcessing';\r\nimport { countWidth } from '../../../modules/countProcessing';\r\nimport Bar from './Bar';\r\n\r\nconst Timer = (props) => {\r\n\r\n\r\n  let [seconds, setSeconds] = useState(0);\r\n  let [maxSec, setMaxSec] = useState(0);\r\n\r\n  useEffect(() => {\r\n\r\n    let interval;\r\n    if (seconds !== 0) {\r\n      interval = setInterval(() => {\r\n        setSeconds(seconds => seconds - 1);\r\n      }, 1000);\r\n\r\n    } else {\r\n\r\n      let curDate = new Date()\r\n      setMaxSec(getDurationinSec(props.duration));\r\n      setSeconds(getDurationinSec(props.duration) - getTimeDiff(props.startTime, curDate));\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n\r\n  }, [seconds, props.duration, props.startTime]);\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <Bar\r\n        width={countWidth(seconds, maxSec)}\r\n        color=\"#96c7cc\"\r\n        content={setTime(seconds)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;","import React, { useState, useEffect } from 'react';\r\n\r\nimport '../../../App.css';\r\nimport './points.css';\r\n\r\nimport Bar from './Bar';\r\nimport Circle from './Circle';\r\nimport Timer from './Timer';\r\nimport { countScore, countWidth } from '../../../modules/countProcessing';\r\n\r\nconst Points = (props) => {\r\n\r\n    const TIME_DEFAULT = '0 00:00:00';\r\n    const DATE_DEFAULT = new Date();\r\n\r\n    let [score, setScore] = useState(0);\r\n    let [maxScore, setMaxScore] = useState(0);\r\n    let [startTime, setStartTime] = useState(DATE_DEFAULT);\r\n    let [duration, setDuration] = useState(TIME_DEFAULT);\r\n\r\n    //console.log(props)\r\n    useEffect(() => {\r\n\r\n        //console.log(props.globalState.contest)\r\n        let contest = props.globalState.contest;\r\n\r\n        let progress = props.globalState.tasks;\r\n\r\n\r\n        setStartTime(contest.date_start);\r\n        setDuration(contest.duration);\r\n        setScore(countScore(progress, 'real-time'));\r\n        setMaxScore(countScore(progress, 'max'));\r\n\r\n    }, [props.score, props.globalState.contest, props.globalState.tasks]);\r\n\r\n    return (\r\n        <div className=\"points\">\r\n            <div className=\"bars\">\r\n                <Bar\r\n                    width={countWidth(score, maxScore)}\r\n                    color=\"#78d0ff\"\r\n                    content={\"Прогресс - \" + countWidth(score, maxScore) + \"%\"}\r\n                />\r\n                <Timer\r\n                    startTime={startTime}\r\n                    duration={duration}\r\n                />\r\n            </div>\r\n            <Circle\r\n                content={score}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Points;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './gameStyle.css';\r\n\r\nclass Game extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"backgroung\">\r\n                <Player />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Game;\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            player: {\r\n                x: 50,\r\n                y: 100,\r\n                height: 100,\r\n                width: 50,\r\n                action: \"walk\",\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"walk\"></div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../../App.css';\r\nimport '../small/buttons.css';\r\nimport style from '../../modules/style';\r\nimport { useState } from 'react';\r\nimport Game from \"../game/gameClass\";\r\n\r\nconst Notification = (props) => {\r\n\r\n    let [state, setState] = useState(false);\r\n\r\n    const openNotPanel = () => {\r\n        setState(true);\r\n    }\r\n    const closeNotPanel = () => {\r\n        setState(false);\r\n    }\r\n\r\n    const RenderBtn = () => {\r\n        return (\r\n            <button\r\n                className=\"btn not-open-btn\"\r\n                style={style.unabledElement}\r\n                onClick={openNotPanel}>\r\n\r\n            </button>\r\n        );\r\n    }\r\n    const RenderBox = () => {\r\n        return (\r\n            <div className=\"screen not-panel-align\">\r\n                <div\r\n                    className=\"gray-screen\"\r\n                    style={style.lowerElement}>\r\n                </div>\r\n\r\n                <div\r\n                    className='msg-box'\r\n                    style={style.upperElement}>\r\n                    <button className='btn not-close-btn' onClick={closeNotPanel}></button>\r\n                    <div className='not-text normal-text'>{msg}</div>\r\n                </div>\r\n\r\n                <Game/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        state ? <RenderBox /> : <RenderBtn />\r\n    );\r\n}\r\n\r\nexport default Notification;\r\n//test data\r\nlet msg = \"здесь будет или игра с кубитоклобусами или тест кто ты из них\"","import React, { useState, useEffect } from 'react';\r\nimport {dateCleaner} from '../../modules/dateProcessing';\r\nimport '../../App.css';\r\nimport './table.css';\r\n\r\nconst Line = (props) => {\r\n\r\n    let [score, setScore] = useState(\"0\");\r\n    let [message, setMessage] = useState(\"\");\r\n    let [style, setStyle] = useState(\"right\");\r\n\r\n    useEffect(() => {\r\n        if (props.error === null) {\r\n            setScore(props.result);\r\n            setMessage(props.text);\r\n            setStyle(\"right\");\r\n        } else {\r\n            setScore('0');\r\n            setMessage(props.error);\r\n            setStyle(\"wrong\");\r\n        }\r\n    }, [props.error, props.text, props.result]);\r\n\r\n\r\n    return (\r\n        <tr key={props.id}>\r\n            <td className={`data ${style}`}>\r\n                {dateCleaner(props.date) + message}\r\n            </td>\r\n            <td className='result'>{score +\"/\"+ props.points}</td>\r\n        </tr >\r\n    )\r\n\r\n}\r\n\r\nexport default Line;\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../../App.css';\r\nimport './table.css';\r\n\r\nimport Line from './LineFun';\r\n\r\nconst Table = (props) => {\r\n\r\n\r\n    let [answerArray, setAnswerArray] = useState();\r\n\r\n    //console.log(props);\r\n    //const answers = JSON.parse(localStorage.getItem(\"answers\"));\r\n\r\n    useEffect(() => {\r\n        //console.log(props.globalState);\r\n        let answers = props.globalState.answers;\r\n        let answer = answers.map(\r\n            function (el) {\r\n                if (el.user_task === props.id) {\r\n                    if (el.error == null)\r\n                        return <Line key={el.id} text={el.data} date={el.date_send} error={null} result={el.result} points={props.points} />\r\n                    else return <Line key={el.id} text={null} date={el.date_send} error={el.error} result={el.result} points={props.points} />\r\n                }\r\n            }\r\n        );\r\n        setAnswerArray(answer);\r\n    }, [props.id, props.points, props.globalState.answers]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <table className='option-text-m'>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Попытки</th>\r\n                        <th>Баллы</th>\r\n                    </tr>\r\n                    {answerArray}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Table;\r\n\r\n","import '../../App.css';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport Table from './TableFun';\r\n\r\nconst Task = (props) => {\r\n\r\n    let [points, setPoints] = useState(\"\");\r\n    useEffect(() => {\r\n       \r\n        //console.log(props)\r\n        setPoints(props.points);\r\n    }, [props.points]);\r\n\r\n    return (\r\n\r\n        <div >\r\n            <div className=\"heading2 title\">{props.task.title}</div>\r\n            <div className=\"normal-text task\">{props.task.text}</div>\r\n            <Table id={props.task.id} points={points} globalState={props.globalState} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Task;","import React, { useEffect } from 'react';\r\nimport '../../App.css';\r\n\r\nconst Info = (props) => {\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(props)\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"heading2 title\">{props.title}</div>\r\n            <div className=\"normal-text\">{props.text}</div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Info;","import React from \"react\";\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport Task from './Task';\r\nimport Info from '../main/Info';\r\n\r\nconst RenderTasks = (props) => {\r\n\r\n    let tasks = props.globalState.tasks.map(\r\n        (el) => \r\n            el.task.task_type === 1 ?\r\n            <Route\r\n                exact path={'/0/task/' + el.task.id}\r\n                render={() => <Task points={el.task.points} task={el.task} globalState={props.globalState} />} />\r\n            : <Route\r\n                exact path={'/0/info/' + el.task.id}\r\n                render={() => <Info title={el.task.title} text={el.task.text} />} />\r\n        \r\n    );\r\n    return tasks;\r\n}\r\nexport default RenderTasks;  ","import React, { useEffect } from 'react';\r\nimport './preloader.scss';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst Loader = (props) => {\r\n\r\n    useEffect(()=>{},[props.globalState.isLoaded]);\r\n\r\n    return (\r\n        <div>\r\n            {props.globalState.isLoaded ?\r\n                    <Redirect to=\"/0/task/2\" from=\"/0/loader\" />\r\n                    : <Animation />}\r\n        </div>\r\n    );\r\n}\r\nexport default Loader;\r\n\r\nconst Animation = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"item-1\"><div></div></div>\r\n            <div className=\"item-2\"><div></div></div>\r\n            <div className=\"item-3\"><div></div></div>\r\n            <div className=\"item-4\"><div></div></div>\r\n            <div className=\"item-5\"><div></div></div>\r\n            <div className=\"item-6\"><div></div></div>\r\n            <div className=\"item-7\"><div></div></div>\r\n            <div className=\"item-8\"><div></div></div>\r\n            <div className=\"item-9\"><div></div></div>\r\n        </div>\r\n    );\r\n}\r\n","import '../../App.css';\r\nimport React, { useEffect } from 'react';\r\n\r\nimport NavMenu from '../small/navigation/NavMenuFun';//hooks\r\nimport Chat from '../small/chat/ChatFun';//hooks\r\nimport Points from '../small/points/Points';//hooks\r\nimport Notification from '../small/NotificationFun';//hooks\r\nimport RenderTasks from '../task/RenderTasks';//hooks\r\nimport Loader from '../preloader/LoaderFun';\r\n\r\n\r\nconst Main = (props) => {\r\n\r\n    useEffect(() => {\r\n        if (props.globalState.isAuth) {\r\n\r\n            if (!props.globalState.isLoaded) loadData(props);\r\n\r\n            setInterval(() => {\r\n                updateData(props)\r\n                //console.log(\"rerender\")\r\n\r\n            }, 10000)\r\n            props.globalActions.setIsUpdated(false);\r\n\r\n            //console.log(props.globalState.contest, props.globalState.tasks, props.globalState.answers, props.globalState.notifications)\r\n        }\r\n    }, [\r\n        props.globalActions,\r\n        props.globalState.isUpdated,\r\n        props.globalState.isLoaded,\r\n        props.globalState.isAuth,\r\n    ])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.globalState.isLoaded ?\r\n                    <div>\r\n                        <NavMenu globalState={props.globalState} />\r\n                        <Chat globalState={props.globalState} />\r\n                        <Notification />\r\n                        <div className=\"content main\">\r\n\r\n                            <Points globalState={props.globalState} />\r\n                            <RenderTasks tasks={props.globalState.tasks} globalState={props.globalState} />\r\n                        </div>\r\n                    </div>\r\n                    : <Loader globalState={props.globalState} />\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Main;\r\n\r\nlet loadData = async (props) => {\r\n\r\n    var p1 = props.globalActions.updateContest().then(function (value) {\r\n        return value\r\n    });\r\n    var p2 = props.globalActions.updateTasks().then(function (value) {\r\n        return value\r\n    });\r\n    var p3 = props.globalActions.updateAnswers().then(function (value) {\r\n        return value\r\n    });\r\n    var p4 = props.globalActions.updateNotifications().then(function (value) {\r\n        return value\r\n    });\r\n\r\n    Promise.all([p1, p2, p3, p4]).then(val => {\r\n        //console.log(val);\r\n        if (val[0] && val[1] && val[2] && val[3])\r\n            props.globalActions.setIsLoaded(true)\r\n    })\r\n};\r\n\r\nlet updateData = async (props) => {\r\n\r\n    var p1 = props.globalActions.updateContest().then(function (value) {\r\n        return value\r\n    });\r\n    var p2 = props.globalActions.updateTasks().then(function (value) {\r\n        return value\r\n    });\r\n    var p3 = props.globalActions.updateAnswers().then(function (value) {\r\n        return value\r\n    });\r\n    var p4 = props.globalActions.updateNotifications().then(function (value) {\r\n        return value\r\n    });\r\n\r\n    Promise.all([p1, p2, p3, p4]).then(val => {\r\n        //console.log(val);\r\n        if (val[0] && val[1] && val[2] && val[3])\r\n            props.globalActions.setIsUpdated(true)\r\n    })\r\n};","import React from 'react';\r\nimport '../../App.css';\r\n\r\nconst Header = () => (\r\n    <header>\r\n            <div className=\"logo\" ></div>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../../App.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer></footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import './App.css';\r\nimport './components/main/main.css';\r\n\r\nimport React from 'react';\r\nimport { Route, BrowserRouter, Redirect } from \"react-router-dom\";\r\nimport { useGlobal } from './components/main/GlobalState';\r\n\r\n\r\nimport Auth from './components/auth/AuthFun';\r\nimport Main from './components/main/MainFun';\r\nimport Header from './components/main/Header';//hooks\r\nimport Footer from './components/main/Footer';//hooks\r\nimport Loader from './components/preloader/LoaderFun';\r\nimport Game from './components/game/gameClass';\r\nconst App = () => {\r\n\r\n    let [globalState, globalActions] = useGlobal();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header />\r\n            <div className=\"content-page\">\r\n                <BrowserRouter>\r\n                    <Redirect to='/auth' from=\"/alt_nti\" />\r\n                    <Route\r\n                        path='/0/loader'\r\n                        render={() =>\r\n                            <Loader globalState={globalState} globalActions={globalActions} />\r\n                        } />\r\n                    <Route\r\n                        path='/auth'\r\n                        render={() =>\r\n                            <Auth isAuth={globalState.isAuth} globalActions={globalActions} />\r\n                        } />\r\n                    <Route\r\n                        path='/0'\r\n                        render={() =>\r\n                            <Main globalState={globalState} globalActions={globalActions} />\r\n                        } />\r\n\r\n                    <Route path='/game' render={() => <Game />} />\r\n\r\n                </BrowserRouter>\r\n            </div>\r\n            <Footer />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}